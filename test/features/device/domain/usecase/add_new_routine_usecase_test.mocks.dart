// Mocks generated by Mockito 5.3.2 from annotations
// in smartx/test/features/device/domain/usecase/add_new_routine_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:smartx/core/error/failures.dart' as _i5;
import 'package:smartx/features/devices/data/model/routines_model.dart' as _i6;
import 'package:smartx/features/devices/domain/entity/device.dart' as _i7;

import 'add_new_routine_usecase_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceRepositoryTest extends _i1.Mock
    implements _i3.DeviceRepositoryTest {
  MockDeviceRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> addNewRoutine(
    int? id,
    _i6.RoutineModel? routine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewRoutine,
          [
            id,
            routine,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #addNewRoutine,
            [
              id,
              routine,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.Device>?>> getAllDevices() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllDevices,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i7.Device>?>>.value(
                _FakeEither_0<_i5.Failure, List<_i7.Device>?>(
          this,
          Invocation.method(
            #getAllDevices,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i7.Device>?>>);
}
